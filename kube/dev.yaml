# deploy a fully functional development environment as a statefulset
# check https://github.com/onichandame/docker-dev for docs
apiVersion: v1
kind: Namespace
metadata:
  name: dev
  labels:
    istio-injection: enabled
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: http-gateway
  namespace: dev
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        number: 3000
        name: http
        protocol: HTTP
      hosts:
        - "<hostname>" # match the domain name of your own
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: http
  namespace: dev
spec:
  gateways:
    - http-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: dev
            port:
              number: 3000
  hosts:
    - "*"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: dev
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: api-access
  namespace: dev
rules:
  - apiGroups:
      - ""
      - apps
      - autoscaling
      - batch
      - extensions
      - policy
      - rbac.authorization.k8s.io
    resources:
      - componentstatuses
      - configmaps
      - daemonsets
      - deployments
      - events
      - endpoints
      - horizontalpodautoscalers
      - ingress
      - jobs
      - limitranges
      - namespaces
      - nodes
      - pods
      - pods/log
      - persistentvolumes
      - persistentvolumeclaims
      - resourcequotas
      - replicasets
      - replicationcontrollers
      - serviceaccounts
      - services
    verbs: ["*"]
  - nonResourceURLs: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: api-access
  namespace: dev
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: api-access
subjects:
  - kind: ServiceAccount
    name: admin-user
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: dev
  namespace: dev
spec:
  ports:
    - name: dev
      port: 3000
      targetPort: 3000
  selector:
    app: dev
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dev
  namespace: dev
spec:
  selector:
    matchLabels:
      app: dev
  serviceName: "dev"
  replicas: 1
  template:
    metadata:
      labels:
        app: dev
    spec:
      terminationGracePeriodSeconds: 0
      serviceAccountName: admin-user
      containers:
        - name: dev
          image: "registry.cn-hangzhou.aliyuncs.com/onichandame/docker-dev:latest"
          args: ["--registry-mirror", "https://zpf27k3h.mirror.aliyuncs.com"]
          imagePullPolicy: Always
          securityContext:
            privileged: true
          ports:
            - containerPort: 3000
              name: dev-port
          volumeMounts:
            - mountPath: /git # mount your workspaces here
              name: git-claim
            - name: proxychains
              mountPath: "/etc/proxychains"
          env:
            - name: GIT_USER_NAME
              value: "<username>"
            - name: GIT_USER_EMAIL
              value: "<email>"
      volumes:
        - name: proxychains
          configMap:
            name: proxychains
            items:
              - key: "proxychains.conf"
                path: "proxychains.conf"
  volumeClaimTemplates:
    - metadata:
        name: git-claim
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-storage
        resources:
          requests:
            storage: 50Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: git-storage
  namespace: dev
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /root # match the directory containing all your workspaces
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - <hostname> # match the name of the node where files reside
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
  namespace: dev
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxychains
  namespace: dev
data:
  proxychains.conf: |
    strict_chain
    remote_dns_subnet 224
    tcp_read_time_out 15000
    tcp_connect_time_out 8000
    [ProxyList]
    socks5 localhost 10808
